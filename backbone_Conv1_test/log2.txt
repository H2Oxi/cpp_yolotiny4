==42966== Memcheck, a memory error detector
==42966== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==42966== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==42966== Command: ./tst2
==42966== Parent PID: 26960
==42966== 
==42966== Use of uninitialised value of size 8
==42966==    at 0x49BAAEE: std::basic_streambuf<char, std::char_traits<char> >::xsgetn(char*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6)
==42966==    by 0x4984588: std::basic_filebuf<char, std::char_traits<char> >::xsgetn(char*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6)
==42966==    by 0x49918F0: std::istream::read(char*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6)
==42966==    by 0x10C1CA: load_int8_data(signed char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long) (tst2.cpp:503)
==42966==    by 0x10B4F7: basic_conv::data_update(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (tst2.cpp:302)
==42966==    by 0x10BE91: main (tst2.cpp:448)
==42966== 
==42966== Invalid write of size 1
==42966==    at 0x49BAAEE: std::basic_streambuf<char, std::char_traits<char> >::xsgetn(char*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6)
==42966==    by 0x4984588: std::basic_filebuf<char, std::char_traits<char> >::xsgetn(char*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6)
==42966==    by 0x49918F0: std::istream::read(char*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6)
==42966==    by 0x10C1CA: load_int8_data(signed char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long) (tst2.cpp:503)
==42966==    by 0x10B4F7: basic_conv::data_update(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (tst2.cpp:302)
==42966==    by 0x10BE91: main (tst2.cpp:448)
==42966==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==42966== 
==42966== 
==42966== Process terminating with default action of signal 11 (SIGSEGV)
==42966==  Access not within mapped region at address 0x0
==42966==    at 0x49BAAEE: std::basic_streambuf<char, std::char_traits<char> >::xsgetn(char*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6)
==42966==    by 0x4984588: std::basic_filebuf<char, std::char_traits<char> >::xsgetn(char*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6)
==42966==    by 0x49918F0: std::istream::read(char*, long) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6)
==42966==    by 0x10C1CA: load_int8_data(signed char*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long) (tst2.cpp:503)
==42966==    by 0x10B4F7: basic_conv::data_update(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (tst2.cpp:302)
==42966==    by 0x10BE91: main (tst2.cpp:448)
==42966==  If you believe this happened as a result of a stack
==42966==  overflow in your program's main thread (unlikely but
==42966==  possible), you can try to increase the size of the
==42966==  main thread stack using the --main-stacksize= flag.
==42966==  The main thread stack size used in this run was 16777216.
==42966== 
==42966== HEAP SUMMARY:
==42966==     in use at exit: 602,898 bytes in 11 blocks
==42966==   total heap usage: 20 allocs, 9 frees, 620,777 bytes allocated
==42966== 
==42966== LEAK SUMMARY:
==42966==    definitely lost: 0 bytes in 0 blocks
==42966==    indirectly lost: 0 bytes in 0 blocks
==42966==      possibly lost: 0 bytes in 0 blocks
==42966==    still reachable: 602,898 bytes in 11 blocks
==42966==         suppressed: 0 bytes in 0 blocks
==42966== Reachable blocks (those to which a pointer was found) are not shown.
==42966== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==42966== 
==42966== Use --track-origins=yes to see where uninitialised values come from
==42966== For lists of detected and suppressed errors, rerun with: -s
==42966== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
